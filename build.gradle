import org.gradle.testing.jacoco.tasks.JacocoReport

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.8'
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.5"
    }
}

apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'com.google.protobuf'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'jacoco'

group = 'io.emeraldpay'
version = '0.7.1'

targetCompatibility = '11'
sourceCompatibility = '11'

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "http://repo.spring.io/snapshot" }
    maven { url "http://repo.spring.io/milestone" }
}

sourceSets {
    main {
        proto {
            srcDir 'api-definitions/proto'
        }
    }
}

dependencies {
    api "io.grpc:grpc-protobuf:${grpcVersion}"
    api "io.grpc:grpc-stub:${grpcVersion}"
    implementation "io.grpc:grpc-netty:${grpcVersion}"
    implementation "io.netty:netty-tcnative-boringssl-static:2.0.22.Final"
    implementation "javax.annotation:javax.annotation-api:1.3.2"
    implementation "com.salesforce.servicelibs:reactor-grpc:${reactiveGrpcVersion}"
    api "com.salesforce.servicelibs:reactor-grpc-stub:${reactiveGrpcVersion}"


    testImplementation "org.codehaus.groovy:groovy:${groovyVersion}"
    testImplementation "org.spockframework:spock-core:${spockVersion}"
    testImplementation "io.grpc:grpc-testing:${grpcVersion}"
}

test {
    useJUnitPlatform()
    testLogging.showStandardStreams = true
    testLogging.exceptionFormat = 'full'
}

protobuf {
    protoc { artifact = "com.google.protobuf:protoc:${protocVersion}" }
    plugins {
        grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}" }
        reactor {  artifact = "com.salesforce.servicelibs:reactor-grpc:${reactiveGrpcVersion}:jdk8@jar" }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
            reactor {}
        }
    }
}

afterEvaluate {
    bintrayUpload.dependsOn(compileJava)
    bintrayUpload.dependsOn(generateProto)
    install.dependsOn(generateProto)
    generateProto.dependsOn(clean)
}

def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
        }
    }
    developers {
        developer {
            id "splix"
            name "Igor Artamonov"
            email "igor@artamonov.email"
        }
    }

    scm {
        connection "scm:git:git://github.com/emeraldpay/emerald-java-client.git"
        developerConnection "scm:git:git://github.com/emeraldpay/emerald-java-client.git"
        url "https://github.com/emeraldpay/emerald-java-client"
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

publishing {
    publications {
        EmeraldPublication(MavenPublication) {
            from components.java
            artifact sourcesJar {
                classifier "sources"
            }
            artifact javadocJar {
                classifier "javadoc"
            }

            groupId project.group
            artifactId project.name
            version project.version
            pom.withXml {
                def root = asNode()
                root.appendNode('name', 'Emerald API')
                root.children().last() + pomConfig
            }
        }
    }
}

bintray {
    user = System.getProperty('bintrayUser') ? System.getProperty('bintrayUser') : System.getenv('BINTRAY_USER')
    key = System.getProperty('bintrayApiKey') ? System.getProperty('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')

    publications = ['EmeraldPublication']

    dryRun=false
    publish=true
    override=true

    pkg {
        userOrg = 'emerald'
        repo = 'emerald-api'
        name = project.name
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/emeraldpay/emerald-java-client.git'
        labels = ['ethereum', 'bitcoin', 'blockchain', 'emerald']
        publicDownloadNumbers = true

        version {
            name = project.version
            description = 'Emerald API (gRPC Stubs for Java)'
            released  = new Date()
            vcsTag = 'v' + project.version

            gpg {
                sign = true
            }
        }
    }
}

jacoco {
    toolVersion = "0.8.5"
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

test.finalizedBy jacocoTestReport

task coverageReport(type: JacocoReport) {
    dependsOn = subprojects.test
    additionalSourceDirs.setFrom files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories.setFrom files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories.setFrom files(subprojects.sourceSets.main.output)
    executionData.setFrom project.fileTree(dir: '.', include: '**/build/jacoco/test.exec')
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled true
    }
}